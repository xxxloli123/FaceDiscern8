package com.android.face_discern.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.face_discern.model.Contrast;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTRAST".
*/
public class ContrastDao extends AbstractDao<Contrast, Long> {

    public static final String TABLENAME = "CONTRAST";

    /**
     * Properties of entity Contrast.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, String.class, "age", false, "AGE");
        public final static Property Time = new Property(3, Long.class, "time", false, "TIME");
        public final static Property CaptureImg = new Property(4, String.class, "captureImg", false, "CAPTURE_IMG");
        public final static Property RegisterImg = new Property(5, String.class, "registerImg", false, "REGISTER_IMG");
        public final static Property ContrastPercentage = new Property(6, String.class, "contrastPercentage", false, "CONTRAST_PERCENTAGE");
    }


    public ContrastDao(DaoConfig config) {
        super(config);
    }
    
    public ContrastDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTRAST\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" TEXT," + // 2: age
                "\"TIME\" INTEGER," + // 3: time
                "\"CAPTURE_IMG\" TEXT," + // 4: captureImg
                "\"REGISTER_IMG\" TEXT," + // 5: registerImg
                "\"CONTRAST_PERCENTAGE\" TEXT);"); // 6: contrastPercentage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTRAST\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contrast entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String captureImg = entity.getCaptureImg();
        if (captureImg != null) {
            stmt.bindString(5, captureImg);
        }
 
        String registerImg = entity.getRegisterImg();
        if (registerImg != null) {
            stmt.bindString(6, registerImg);
        }
 
        String contrastPercentage = entity.getContrastPercentage();
        if (contrastPercentage != null) {
            stmt.bindString(7, contrastPercentage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contrast entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(3, age);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(4, time);
        }
 
        String captureImg = entity.getCaptureImg();
        if (captureImg != null) {
            stmt.bindString(5, captureImg);
        }
 
        String registerImg = entity.getRegisterImg();
        if (registerImg != null) {
            stmt.bindString(6, registerImg);
        }
 
        String contrastPercentage = entity.getContrastPercentage();
        if (contrastPercentage != null) {
            stmt.bindString(7, contrastPercentage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Contrast readEntity(Cursor cursor, int offset) {
        Contrast entity = new Contrast( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // captureImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // registerImg
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // contrastPercentage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contrast entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCaptureImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRegisterImg(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setContrastPercentage(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contrast entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contrast entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contrast entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
